C51 COMPILER V9.60.0.0   MAIN                                                              06/08/2023 04:30:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Device\KEY;..\Device\Nixie_tub
                    -e;..\HARDWARE\IIC;..\HARDWARE\Timer;..\SYSTEM\delay;..\Project) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OB
                    -JECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
*** ERROR C100 IN LINE 29 OF main.h: unprintable character 0xA1 skipped
*** ERROR C100 IN LINE 29 OF main.h: unprintable character 0xA4 skipped
*** ERROR C100 IN LINE 29 OF main.h: unprintable character 0xA1 skipped
*** ERROR C100 IN LINE 29 OF main.h: unprintable character 0xA4 skipped
   2          
   3          /************************************************
   4           基于ATM89C52-门锁的设计与实现
   5           CSDN："枫叶"，免费获取程序资料。
   6           授课老师：汪琳霞
   7           实验地点：计算机学院  
   8           作者：刘锋
   9          ************************************************/
  10          
  11          
  12          Lock_Status_T lock_T;                 //定义锁状态全局结构体变量
  13          unsigned int code pwd[5]={0,1,2,3,4}; //初始密码1234，从index1开始
  14          unsigned int cur_pwd[5];              //存储当前密码
  15          
  16          /*
  17            *重置密码锁密码 默认1234
  18          */
  19          void Init_cur_pwd()
  20          {
  21   1        int i;
  22   1        for(i=1;i<5;i++)
  23   1          cur_pwd[i]=pwd[i];
  24   1        /*设置完成后将密码写入EEPROM*/
  25   1        I2C_Write_pwd();
  26   1      }
  27          
  28          /*
  29            *清除输入的内容 
  30            *一个参数：Number_T *number_t
  31            *Number_T *number：实时输入数组结构体
  32          */
  33          void cur_number_Clear(Number_T *number_t)     
  34          {
  35   1        int i;
  36   1        for(i=1;i<5;i++)
  37   1          number_t->numbers[i]=0;
  38   1        number_t->input_index=0;
  39   1      }
  40          /*
  41            *清除密码锁所有状态  
  42            *两个参数：Number_T *number_t、Lock_Status_T *lock_t
  43            *Number_T *number：     键盘输入数组结构体
  44            *Lock_Status_T *lock_t：门锁状态结构体
  45          */
  46          void lock_status_clear(Number_T *number_t,Lock_Status_T *lock_t)
  47          {
  48   1            LED_displayOFF();             //熄屏模
  49   1            Lock_OFF();                   //关锁-绿色灯灭
C51 COMPILER V9.60.0.0   MAIN                                                              06/08/2023 04:30:55 PAGE 2   

  50   1            ALARM_OFF();                  //关报警-红色报价单灭
  51   1            SETLED_OFF();                 //关闭设置密码状态灯
  52   1        
  53   1            lock_t->Nixie_tube_status=0;  //清除是否开锁成功数码管显示标志位
  54   1            lock_t->time_off_lock=0;      //清除锁的开启与关闭标志位
  55   1            lock_t->Set_pwd_status=0;     //清除设置密码标志
  56   1        
  57   1            time_off_lock_count=0;        //开锁后的倒计时5s清除
  58   1            alarm_flag_time=0;            //报警时间60s时间清除
  59   1            cur_number_Clear(number_t);   //清除输入的内容
  60   1      }
  61          /*
  62            *清除密码锁所有状态  
  63            *两个参数：Number_T *number_t、Lock_Status_T *lock_t
  64            *Number_T *number：     键盘输入数组结构体
  65            *Lock_Status_T *lock_t：门锁状态结构体
  66          */
  67          void KeyBoard_Control(Number_T *number_t,Lock_Status_T *lock_T)
  68          { 
  69   1          int i;
  70   1          int pwd_count=0;
  71   1          GetKey();//调用矩阵键盘
  72   1        
  73   1          //错误三次后报警标记
  74   1          if(lock_T->alarm_flag!=3)
  75   1          {
  76   2            //当前输入的内容少于四位
  77   2            if(number_t->input_index<4)
  78   2            {
  79   3                //选择对应键值，存入数组当中
  80   3                switch(key_flag) 
  81   3                {
  82   4                  case 1:
  83   4                      number_t->input_index++;
  84   4                      number_t->numbers[number_t->input_index]=1;
  85   4                    break;
  86   4                  case 2:
  87   4                      number_t->input_index++;
  88   4                      number_t->numbers[number_t->input_index]=2;
  89   4                    break;
  90   4                  case 3:
  91   4                      number_t->input_index++;
  92   4                      number_t->numbers[number_t->input_index]=3;
  93   4                    break;
  94   4                  case 5:
  95   4                      number_t->input_index++;
  96   4                      number_t->numbers[number_t->input_index]=4;
  97   4                    break;
  98   4                  case 6:
  99   4                      number_t->input_index++;
 100   4                      number_t->numbers[number_t->input_index]=5;
 101   4                    break;
 102   4                  case 7:
 103   4                      number_t->input_index++;
 104   4                      number_t->numbers[number_t->input_index]=6;
 105   4                    break;
 106   4                  case 9: 
 107   4                      number_t->input_index++;
 108   4                      number_t->numbers[number_t->input_index]=7;
 109   4                    break;
 110   4                  case 10:
 111   4                      number_t->input_index++;
C51 COMPILER V9.60.0.0   MAIN                                                              06/08/2023 04:30:55 PAGE 3   

 112   4                      number_t->numbers[number_t->input_index]=8;
 113   4                    break;
 114   4                  case 11:
 115   4                      number_t->input_index++;
 116   4                      number_t->numbers[number_t->input_index]=9;
 117   4                    break;
 118   4                  case 14:
 119   4                      number_t->input_index++;
 120   4                      number_t->numbers[number_t->input_index]=0;
 121   4                    break;
 122   4                }
 123   3            }
 124   2            //手动清除所有状态以及报警
 125   2            if(key_flag==12)
 126   2            {
 127   3              lock_status_clear(number_t,lock_T);
 128   3              lock_T->alarm_flag=0;         //清除错误三次后报警标记
 129   3            }
 130   2            /*清除一位或重新输入密码键*/
 131   2            if(key_flag==13)
 132   2            {
 133   3              if(number_t->input_index>0)
 134   3              {
 135   4                number_t->input_index--;
 136   4                LED_displayOFF();
 137   4              }
 138   3            }
 139   2            
 140   2            /*在设置密码状态开锁无效*/
 141   2            if(lock_T->Set_pwd_status==0)
 142   2            {
 143   3              /*#号键验证密码*/
 144   3              if(key_flag==15)
 145   3              {
 146   4                number_t->input_index=0;
 147   4                if(pwd_count==0)
 148   4                {
 149   5                  //比较密码
 150   5                  for(i=1;i<5;i++)
 151   5                  {
 152   6                    if(cur_pwd[i]==number_t->numbers[i])
 153   6                    {
 154   7                      pwd_count=pwd_count+1;
 155   7                    }
 156   6                  }
 157   5                  /*比较密码*/
 158   5                  if(pwd_count==4)
 159   5                  {
 160   6                    Lock_ON();
 161   6                    lock_T->Nixie_tube_status=2;
 162   6                  }
 163   5                  else
 164   5                  {
 165   6                    lock_T->alarm_flag++;
 166   6                    lock_T->Nixie_tube_status=1;
 167   6                  }
 168   5                  lock_T->time_off_lock=1;
 169   5                  pwd_count=0;
 170   5                }
 171   4              }
 172   3            }
 173   2            /*Set设置密码*/
C51 COMPILER V9.60.0.0   MAIN                                                              06/08/2023 04:30:55 PAGE 4   

 174   2            if(key_flag==4)
 175   2            {
 176   3              lock_status_clear(number_t,lock_T);
 177   3              /*Set设置密码*/
 178   3              if(lock_T->Set_pwd_status==0)
 179   3              {
 180   4                lock_T->Set_pwd_status=1;
 181   4                SETLED_ON();
 182   4              }
 183   3              /*再次按下Set取消设置密码*/
 184   3              else if(lock_T->Set_pwd_status==1)
 185   3              {
 186   4                lock_T->Set_pwd_status=0;
 187   4                SETLED_OFF();
 188   4              }
 189   3            }
 190   2            /*当前正在设置密码*/
 191   2            if((lock_T->Set_pwd_status==1)&&key_flag==16)
 192   2            {
 193   3              //输入完成按下OK键
 194   3              if(number_t->input_index==4) 
 195   3              {
 196   4                  for(i=1;i<5;i++)
 197   4                  {
 198   5                    cur_pwd[i]=number_t->numbers[i];
 199   5                  }
 200   4                  SETLED_OFF(); 
 201   4                  lock_T->Set_pwd_status=0;  
 202   4                  lock_T->Nixie_tube_status=0;
 203   4                  cur_number_Clear(number_t);
 204   4                  /*设置完成后将密码写入EEPROM*/
 205   4                  I2C_Write_pwd();
 206   4              }
 207   3              //设置失败，未达到四位,清除然后在重新输入
 208   3              else
 209   3              {       
 210   4                  SETLED_OFF();
 211   4                  LED_displayOFF();
 212   4                  lock_T->Set_pwd_status=0;
 213   4                  lock_T->Nixie_tube_status=1;
 214   4                  cur_number_Clear(number_t);
 215   4              }
 216   3            }
 217   2            /*重置密码*/
 218   2            if(key_flag==8)
 219   2            {
 220   3              Init_cur_pwd();
 221   3              for(i=0;i<6;i++)
 222   3              {
 223   4                LED_Set=~LED_Set;
 224   4                Delay(300);
 225   4              }
 226   3            }
 227   2          }
 228   1          key_flag=0;
 229   1      }
 230          /*主程序Main函数*/
 231          void main(void)
 232          {
 233   1        /*定义结构体变量*/
 234   1        Number_T number_T;
 235   1        //定时器初始化
C51 COMPILER V9.60.0.0   MAIN                                                              06/08/2023 04:30:55 PAGE 5   

 236   1        Timer_Init();
 237   1        //首先初始化锁的状态
 238   1        lock_status_clear(&number_T,&lock_T);
 239   1        //上电读取EEPROM存储的密码
 240   1        I2C_Read_pwd();
 241   1        while(1)
 242   1        {
 243   2          //矩阵键盘操作函数
 244   2          KeyBoard_Control(&number_T,&lock_T);
 245   2          //数码管显示函数
 246   2          Display(number_T.numbers,number_T.input_index);
 247   2          
 248   2          /*根据锁状态动态显示*/
 249   2          if(lock_T.Nixie_tube_status==1)
 250   2          {
 251   3            DispLay_ERR();        //密码错误显示ERR
 252   3          }
 253   2          if(lock_T.Nixie_tube_status==2)
 254   2          {
 255   3            DispLay_ON();         //密码正确显示ON
 256   3          }
 257   2          if(alarm_flag_time>60)  //报警时间60s，大于60s恢复默认状态
 258   2          {
 259   3            lock_T.alarm_flag=0;  //报警清除标志
 260   3            ALARM_OFF();          //在关闭一次警告
 261   3          }
 262   2          //每次开锁后清除状态
 263   2          if(time_off_lock_count>=5)
 264   2          {
 265   3            //清除密码的状态
 266   3            lock_status_clear(&number_T,&lock_T); 
 267   3          }
 268   2        
 269   2        }
 270   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  4 ERROR(S)
